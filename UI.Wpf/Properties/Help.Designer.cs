//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Palmmedia.BackUp.UI.Wpf.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Help {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Help() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Palmmedia.BackUp.UI.Wpf.Properties.Help", typeof(Help).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Active.
        /// </summary>
        public static string Active {
            get {
                return ResourceManager.GetString("Active", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether the job is included in the synchronization..
        /// </summary>
        public static string ActiveExplanation {
            get {
                return ResourceManager.GetString("ActiveExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directories are separated by &apos;,&apos;.
        /// </summary>
        public static string ExcludedSubdirectoriesExplanation {
            get {
                return ResourceManager.GetString("ExcludedSubdirectoriesExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extensions are separated by &apos;,&apos;. E.g. &quot;xml,exe,dll&quot; (without the quotes). In case a filter is specified, only folders that contain at least one file with a matching extension will be created. Existing empty folders in the Target Directory will not be deleted, though..
        /// </summary>
        public static string FilterExplanation {
            get {
                return ResourceManager.GetString("FilterExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include subdirectories.
        /// </summary>
        public static string Recursive {
            get {
                return ResourceManager.GetString("Recursive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subdirectories will not be included in synchronization..
        /// </summary>
        public static string RecursiveExplanation {
            get {
                return ResourceManager.GetString("RecursiveExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determinates the folder that will be used as reference. In case the directory does not exist, it will only be created if synchronization is done in both directions..
        /// </summary>
        public static string ReferenceDirectoryExplanation {
            get {
                return ResourceManager.GetString("ReferenceDirectoryExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mode.
        /// </summary>
        public static string SyncMode {
            get {
                return ResourceManager.GetString("SyncMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines whether the Reference Directory shall be mirrored in the Target Directory, or also files of the Target Directory shall be copied to the Reference Directory..
        /// </summary>
        public static string SyncModeExplanation {
            get {
                return ResourceManager.GetString("SyncModeExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will be copied to Target Folder, in case no newer version of the file exists there..
        /// </summary>
        public static string TableBothWaysReference {
            get {
                return ResourceManager.GetString("TableBothWaysReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will be copied to Reference Folder, in case no newer version of the file exists there..
        /// </summary>
        public static string TableBothWaysTarget {
            get {
                return ResourceManager.GetString("TableBothWaysTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File / Directory in Reference Directory.
        /// </summary>
        public static string TableHeaderReference {
            get {
                return ResourceManager.GetString("TableHeaderReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File / Directory in Target Directory.
        /// </summary>
        public static string TableHeaderTarget {
            get {
                return ResourceManager.GetString("TableHeaderTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will be copied to Target Folder, in case no newer version of the file exists there..
        /// </summary>
        public static string TableLeftToRightReference {
            get {
                return ResourceManager.GetString("TableLeftToRightReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Will be deleted, in case it does not exist in Reference Directory..
        /// </summary>
        public static string TableLeftToRightTarget {
            get {
                return ResourceManager.GetString("TableLeftToRightTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -.
        /// </summary>
        public static string TableLeftToRightWithoutDeletionTarget {
            get {
                return ResourceManager.GetString("TableLeftToRightWithoutDeletionTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determinates the folder that will be used as target. In case the directory does not exist, it will be created..
        /// </summary>
        public static string TargetDirectoryExplanation {
            get {
                return ResourceManager.GetString("TargetDirectoryExplanation", resourceCulture);
            }
        }
    }
}
