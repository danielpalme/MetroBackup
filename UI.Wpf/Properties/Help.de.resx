<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Active" xml:space="preserve">
    <value>Aktiv</value>
  </data>
  <data name="ActiveExplanation" xml:space="preserve">
    <value>Gibt an ob der Job in die Synchronisation einbezogen werden soll.</value>
  </data>
  <data name="FilterExplanation" xml:space="preserve">
    <value>Dateierweiterungen werden dabei mit ',' getrennt angegeben, z.B. "xml,exe,dll" (ohne Anführungszeichen). Wenn ein Filter angegeben ist, dann werden nur Verzeichnisse erstellt, die mindestens eine Datei mit passender Dateierweiterung enthalten. Bestehende leere Verzeichnisse im Zielverzeichnis werden jedoch nicht gelöscht.</value>
  </data>
  <data name="Recursive" xml:space="preserve">
    <value>Unterverzeichnisse einbeziehen</value>
  </data>
  <data name="RecursiveExplanation" xml:space="preserve">
    <value>Gibt an ob Unterverzeichnisse mit in die Synchronisation einbezogen werden sollen.</value>
  </data>
  <data name="ReferenceDirectoryExplanation" xml:space="preserve">
    <value>Das Verzeichnis, das als Referenz dient. Existiert das Verzeichnis nicht, so wird es nur erstellt, wenn in beide Richtungen synchronisiert wird.</value>
  </data>
  <data name="SyncMode" xml:space="preserve">
    <value>Modus</value>
  </data>
  <data name="SyncModeExplanation" xml:space="preserve">
    <value>Gibt an ob das Referenzverzeichnis ins Zielverzeichnis gespiegelt werden soll, oder ob auch Dateien des Zielverzeichnisses ins Referenzverzeichnis kopiert werden sollen.</value>
  </data>
  <data name="TableBothWaysReference" xml:space="preserve">
    <value>Wird ins Zielverzeichnis kopiert, falls dort keine neuere Version existiert.</value>
  </data>
  <data name="TableBothWaysTarget" xml:space="preserve">
    <value>Wird ins Referenzverzeichnis kopiert, falls dort keine neuere Version existiert.</value>
  </data>
  <data name="TableHeaderReference" xml:space="preserve">
    <value>Datei / Verzeichnis im Referenzverzeichnis</value>
  </data>
  <data name="TableHeaderTarget" xml:space="preserve">
    <value>Datei / Verzeichnis im Zielverzeichnis</value>
  </data>
  <data name="TableLeftToRightReference" xml:space="preserve">
    <value>Wird ins Zielverzeichnis kopiert, falls dort keine neuere Version existiert.</value>
  </data>
  <data name="TableLeftToRightTarget" xml:space="preserve">
    <value>Wird gelöscht, falls die Datei im Referenzverzeichnis nicht existiert.</value>
  </data>
  <data name="TableLeftToRightWithoutDeletionTarget" xml:space="preserve">
    <value>-</value>
  </data>
  <data name="TargetDirectoryExplanation" xml:space="preserve">
    <value>Das Verzeichnis, das als Ziel dient. Existiert das Verzeichnis nicht, so wird es erstellt.</value>
  </data>
</root>